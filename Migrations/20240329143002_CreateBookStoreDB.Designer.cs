// <auto-generated />
using System;
using ASPNetCore_WebAPI_BookStore_Website.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ASPNetCore_WebAPI_BookStore_Website.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    [Migration("20240329143002_CreateBookStoreDB")]
    partial class CreateBookStoreDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ASPNetCore_WebAPI_BookStore_Website.Data.Authors", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AuthorId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("ASPNetCore_WebAPI_BookStore_Website.Data.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("Varchar(50)");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("ASPNetCore_WebAPI_BookStore_Website.Data.BookAuthors", b =>
                {
                    b.Property<int>("BookAuthorsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookAuthorId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("BookAuthorsId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("ASPNetCore_WebAPI_BookStore_Website.Data.Customers", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("Varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("Varchar(30)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("Varchar(100)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ASPNetCore_WebAPI_BookStore_Website.Data.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InventoryId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("StockLevelNew")
                        .HasColumnType("int");

                    b.Property<int>("StockLevelUsed")
                        .HasColumnType("int");

                    b.HasKey("InventoryId");

                    b.HasIndex("BookId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("ASPNetCore_WebAPI_BookStore_Website.Data.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderItemID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ASPNetCore_WebAPI_BookStore_Website.Data.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("Shipping")
                        .HasColumnType("int");

                    b.Property<int>("SubTotal")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ASPNetCore_WebAPI_BookStore_Website.Data.Publishers", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PublisherId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("Varchar(50)");

                    b.HasKey("PublisherId");

                    b.HasIndex("BookId");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("ASPNetCore_WebAPI_BookStore_Website.Data.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("Varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("Varchar(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("Varchar(30)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("Varchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ASPNetCore_WebAPI_BookStore_Website.Data.BookAuthors", b =>
                {
                    b.HasOne("ASPNetCore_WebAPI_BookStore_Website.Data.Authors", "Authors")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASPNetCore_WebAPI_BookStore_Website.Data.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Authors");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ASPNetCore_WebAPI_BookStore_Website.Data.Inventory", b =>
                {
                    b.HasOne("ASPNetCore_WebAPI_BookStore_Website.Data.Book", "Book")
                        .WithMany("Inventories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ASPNetCore_WebAPI_BookStore_Website.Data.OrderItem", b =>
                {
                    b.HasOne("ASPNetCore_WebAPI_BookStore_Website.Data.Book", "Book")
                        .WithMany("OrderItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASPNetCore_WebAPI_BookStore_Website.Data.Orders", "Orders")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ASPNetCore_WebAPI_BookStore_Website.Data.Orders", b =>
                {
                    b.HasOne("ASPNetCore_WebAPI_BookStore_Website.Data.Customers", "Customers")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("ASPNetCore_WebAPI_BookStore_Website.Data.Publishers", b =>
                {
                    b.HasOne("ASPNetCore_WebAPI_BookStore_Website.Data.Book", "Book")
                        .WithMany("Publishers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ASPNetCore_WebAPI_BookStore_Website.Data.Authors", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("ASPNetCore_WebAPI_BookStore_Website.Data.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("Inventories");

                    b.Navigation("OrderItems");

                    b.Navigation("Publishers");
                });

            modelBuilder.Entity("ASPNetCore_WebAPI_BookStore_Website.Data.Customers", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ASPNetCore_WebAPI_BookStore_Website.Data.Orders", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
